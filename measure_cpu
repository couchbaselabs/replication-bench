#!/usr/bin/env node

var fs = require('fs'),
    argv = require('optimist').default('p', 0).argv,
    util  = require('util'),
    spawn = require('child_process').spawn,
    request = require('request'),
    follow = require('follow'),
    coux = require('coux');
    

//set up a changes listener
var db = 'http://127.0.0.1:5984/micro';
var diffTimes = new Array();
var samplesToAverage = 15;
var maxTime = 0;
var avgTime = 0;
var reportDB = argv.r;

follow({db:db, include_docs:true, since:"now"}, function(error, change) {
      if(!error) {
        //console.log("Change " + change.seq + " has " + Object.keys(change.doc).length + " fields");
        //console.log("Change doc is: " + change.doc);
        var ctime = (new Date()).getTime();
        var diff = ctime - change.doc.created;
        if(diff > maxTime) {
          maxTime = diff;
        }
        //console.log("diff is " + diff);
        diffTimes.push(diff);
        if(diffTimes.length > samplesToAverage) {
            diffTimes.shift();
        }
        var timeSum = diffTimes.reduce(function(n,m){return n+m;}, 0);
        avgTime = timeSum/diffTimes.length;
        //console.log("updated average is " + avgTime);
        //console.log("diffTimes has " + diffTimes.length + " elements");
      }
});



    
function lookup_couchdb_pid() {
  return fs.readFileSync('/opt/couchbase/var/run/couchdb/couchdb.pid', 'utf8');
}

function get_process_time() {
  var proc_info = fs.readFileSync("/proc/" + pid + "/stat", "utf8").split(/ /);
  return parseInt(proc_info[13]) + parseInt(proc_info[14]);
}


var pid = argv.p;
if(pid === 0) { 
  pid = lookup_couchdb_pid();
}
console.log('pid is ' + pid);

//var proc_info = fs.readFileSync("/proc/" + pid + "/stat", "utf8").split(/ /);
//console.log(parseInt(proc_info[13]) + parseInt(proc_info[14]));

var last_time = 0;
var last_time_clock = new Date();

setInterval(function() {
  var this_time = get_process_time();
  var this_time_clock = new Date();
  if(last_time != 0)  {
    var time_diff = (this_time - last_time);
    var clock_diff = (this_time_clock.getTime() - last_time_clock.getTime()); 
    //cpu time is measured in jiffies (1/100 second most arch)
    var pcpu = (time_diff * 10) / clock_diff * 100;
     //now see how many changes listeners are running
    request({url:'http://localhost:5984/_stats', json:true}, function (error, response, body) {
      var reportData = {
        created: this_time_clock.getTime(),
        cpu: pcpu.toFixed(1),
        changes_listeners:body.httpd.clients_requesting_changes.current,
        avg_delay: avgTime.toFixed(1),
        max_delay: maxTime
      };
      console.log(reportData);
      if(reportDB) {
        coux.post(reportDB, reportData, function(err, ok) {
               // fire and forget, ignore success/failure
        });
      }
    });
  }
  last_time = this_time;
  last_time_clock = this_time_clock;
}, 5 * 1000);

